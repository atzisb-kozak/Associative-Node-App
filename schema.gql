input CreateEchantionnageInput {
  poidsGenerated: Int!
  poidsMeasured: Int!
}

input CreateSachetInput {
  combinaison: [Int!]!
  poids: Int!
}

scalar DateTime

type Echantionnage {
  created_at: DateTime!
  echantionNumber: ID!
  poidsGenerated: Float!
  poidsMeasured: Float!
  updated_at: DateTime!
}

type Mutation {
  createEchantionnage(echantillon: CreateEchantionnageInput!): EchantionnagePayload!
  createSachet(data: CreateSachetInput!): SachetPayload!
  deleteEchantionnage(echantionID: ID!): EchantionnagePayload!
  deleteSachet(sachetID: ID!): SachetPayload!
  updateEchantionnage(echantillon: UpdateEchantionnageInput!, echantionID: ID!): EchantionnagePayload!
  updateSachet(data: UpdateSachetInput!, sachetID: ID!): SachetPayload!
}

type Query {
  echantionnage: [Echantionnage!]!
  echantionnageID(echantionID: ID!): Echantionnage!
  sachet: [Sachet!]!
  sachetID(sachetID: ID!): Sachet!
}

type Sachet {
  combinaison: [Float!]
  created_at: DateTime!
  id: ID!
  poids: Float!
  updated_at: DateTime!
}

input UpdateEchantionnageInput {
  poidsGenerated: Int!
  poidsMeasured: Int!
}

input UpdateSachetInput {
  combinaison: [Int!]!
  poids: Int!
}

type SachetPayload {
	success: Boolean!
	data: Sachet
	error: String
}

type EchantionnagePayload {
	success: Boolean!
	data: Echantionnage
	error: String
}
